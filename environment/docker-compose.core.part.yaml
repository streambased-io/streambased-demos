version: '3.7'
services:

  zookeeper1:
    image: "confluentinc/cp-zookeeper:7.5.0"
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: "2000"
    ports:
      - 2181:2181

  kafka1:
    image: "confluentinc/cp-kafka:7.5.0"
    hostname: kafka1
    ports:
      - 9092:9092
    depends_on:
      - zookeeper1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      KAFKA_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka1
    ports:
      - "8081:8081"
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --fail --silent http://schema-registry:8081/subjects --output /dev/null || exit 1
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: schema-registry

  streambased-server:
    image: local/streambased-enterprise:latest
    hostname: streambased-server
    platform: linux/amd64
    ports:
      - '8080:8080'
    volumes:
      - type: bind
        source: "./streambased/client.properties"
        target: /etc/streambased/etc/client.properties
        read_only: true

  shadowtraffic:
    image: shadowtraffic/shadowtraffic:latest
    hostname: shadowtraffic
    platform: linux/amd64
    depends_on:
      schema-registry:
        condition: service_healthy
    volumes:
      - type: bind
        source: "./shadowtraffic"
        target: /etc/shadowtraffic
        read_only: true
    env_file: "shadowtraffic/license.env"
    command: --config /etc/shadowtraffic/datagen.json --seed 1234
    restart: on-failure

  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: superset
    depends_on:
      schema-registry:
        condition: service_healthy
    platform: linux/amd64
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
    ports:
      - '8088:8088'

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    depends_on:
      schema-registry:
        condition: service_healthy
    platform: linux/amd64
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka1:9092"
              schema-registry:
                url: "http://schema-registry:8081"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - '9090:8080'

  spark-iceberg:
    image: tabulario/spark-iceberg
    hostname: spark
    container_name: spark-iceberg
    volumes:
      - ./spark/warehouse:/home/iceberg/warehouse
      - ./spark/notebooks:/home/iceberg/notebooks/notebooks
      - ./spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
    environment:
      - AWS_ACCESS_KEY_ID=dummyapi
      - AWS_SECRET_ACCESS_KEY=dummysecret
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 10000:10000
      - 10001:10001
      - 4040-4050:4040-4050

  directstream:
    image: streambased/directstream:demo
    hostname: directstream
    container_name: directstream
    platform: linux/amd64
    depends_on:
      - shadowtraffic
    restart: on-failure
    volumes:
      - "./directstream/etc/directstream-config.json:/app/etc/directstream-config.json"
      - "./directstream/etc/indexer.properties:/app/etc/indexer.properties"
      - "./directstream/etc/logback.xml:/app/etc/logback.xml"
    ports:
      - 11000:11000
      - 11001:11001

  s3manager:
    image: cloudlena/s3manager
    hostname: s3manager
    container_name: s3manager
    platform: linux/amd64
    depends_on:
      - directstream
    restart: on-failure
    ports:
      - 9180:9180
    environment:
      - ACCESS_KEY_ID=dummyapi
      - SECRET_ACCESS_KEY=dummysecret
      - REGION=us-east-1
      - USE_SSL=false
      - PORT=9180
      - ENDPOINT=directstream:11000
